name: Build

on:
  workflow_call:
    inputs:
      build_type:
        description: Type of build (Debug, Release, RelWithDebInfo, MinSizeRel)
        type: string
        default: Debug

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:

          - os: ubuntu-20.04
            qt_version: 5.12.8
            qt_host: linux

          - os: ubuntu-20.04
            qt_version: 5.15.2
            qt_host: linux
            app_image: true

          - os: windows-2022
            name: "Windows-i686"
            msystem: mingw32
            portable: false 

          - os: windows-2022
            name: "Windows-x86_64"
            msystem: mingw64
            portable: false 

          - os: windows-2022
            name: "Windows-i686-portable"
            msystem: mingw32
            portable: true 

          - os: windows-2022
            name: "Windows-x86_64-portable"
            msystem: mingw64
            portable: true 

          - os: macos-11
            macosx_deployment_target: 10.12

    runs-on: ${{ matrix.os }}

    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macosx_deployment_target }}
      INSTALL_DIR: "install"
      BUILD_DIR: "build"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: 'Setup MSYS2'
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            git
          pacboy: >-
            toolchain:p
            cmake:p
            ninja:p
            qt5:p

      - name: Install Qt on macOS
        if: runner.os == 'macOS'
        run: |
          brew update -q
          brew install -q qt@5
          echo "/usr/local/opt/qt@5/bin" >> $GITHUB_PATH
          echo "Qt5_DIR=/usr/local/opt/qt@5" >> $GITHUB_ENV
          echo "QT_PLUGIN_PATH=/usr/local/opt/qt@5/plugins" >> $GITHUB_ENV
          echo "QML2_IMPORT_PATH=/usr/local/opt/qt@5/qml" >> $GITHUB_ENV

      - name: Set short version
        shell: bash
        run: |
          ver_short=`git rev-parse --short HEAD`
          echo "VERSION=$ver_short" >> $GITHUB_ENV

      - name: Install OpenJDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Qt
        if: runner.os != 'Windows' && runner.os != 'macOS'
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/Qt/"
          key: ${{ runner.os }}-${{ matrix.qt_version }}-${{ matrix.qt_arch }}-qt_cache

      - name: Install Qt
        if: matrix.app_image == true
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          host: ${{ matrix.qt_host }}
          arch: ${{ matrix.qt_arch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          dir: "${{ github.workspace }}/Qt/"

      - name: Install System Qt on Linux
        if: runner.os == 'Linux' && matrix.app_image != true
        run: |
          sudo apt-get -y update
          sudo apt-get -y install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libqt5core5a libqt5network5 libqt5gui5

      - name: Install Ninja
        if: runner.os != 'Windows'
        uses: urkle/action-get-ninja@v1

      - name: Download linuxdeploy family for AppImage on Linux
        if: matrix.app_image == true
        run: |
          wget "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          wget "https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage"
          wget "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"

      - name: Download JREs for AppImage on Linux
        if: matrix.app_image == true
        shell: bash
        run: |
          ${{ github.workspace }}/.github/scripts/prepare_JREs.sh

      - name: Configure CMake
        if: runner.os != 'Linux' && runner.os != 'Windows'
        run: |
          cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -G Ninja

      - name: Configure CMake on Windows 
        if: runner.os == 'Windows' && matrix.portable != true
        shell: msys2 {0}
        run: |
          cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DLauncher_PORTABLE=OFF -G Ninja


      - name: Configure CMake on Windows portable 
        if: runner.os == 'Windows' && matrix.portable == true
        shell: msys2 {0}
        run: |
          cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -G Ninja 

      - name: Configure CMake on Linux
        if: runner.os == 'Linux'
        run: |
          cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DLauncher_PORTABLE=OFF -G Ninja

      - name: Build
        if: runner.os != 'Windows'
        run: |
          cmake --build ${{ env.BUILD_DIR }}

      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          cmake --build ${{ env.BUILD_DIR }}

      - name: Install
        if: runner.os != 'Linux' && runner.os != 'Windows'
        run: |
          cmake --install ${{ env.BUILD_DIR }}

      - name: Install on Windows
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          cmake --install ${{ env.BUILD_DIR }}

      - name: Install on Linux
        if: runner.os == 'Linux'
        run: |
          DESTDIR=${{ env.INSTALL_DIR }} cmake --install ${{ env.BUILD_DIR }}

      - name: Bundle AppImage
        if: matrix.app_image == true
        shell: bash
        run: |
          export OUTPUT="PolyMC-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage"

          chmod +x linuxdeploy-*.AppImage

          mkdir -p ${{ env.INSTALL_DIR }}/usr/lib/jvm/java-{8,17}-openjdk

          cp -r ${{ github.workspace }}/JREs/jre8/* ${{ env.INSTALL_DIR }}/usr/lib/jvm/java-8-openjdk

          cp -r ${{ github.workspace }}/JREs/jre17/* ${{ env.INSTALL_DIR }}/usr/lib/jvm/java-17-openjdk

          export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${{ env.INSTALL_DIR }}/usr/lib"
          LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${{ env.INSTALL_DIR }}/usr/lib/jvm/java-8-openjdk/lib/amd64/server"
          LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${{ env.INSTALL_DIR }}/usr/lib/jvm/java-8-openjdk/lib/amd64"
          LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${{ env.INSTALL_DIR }}/usr/lib/jvm/java-17-openjdk/lib/server"
          LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${{ env.INSTALL_DIR }}/usr/lib/jvm/java-17-openjdk/lib"

          ./linuxdeploy-x86_64.AppImage --appdir ${{ env.INSTALL_DIR }} --output appimage --plugin qt -i ${{ env.INSTALL_DIR }}/usr/share/icons/hicolor/scalable/apps/org.polymc.PolyMC.svg

      - name: Run macdeployqt
        if: runner.os == 'macOS'
        run: |
          cd ${{ env.INSTALL_DIR }}
          macdeployqt "PolyMC.app" -executable="PolyMC.app/Contents/MacOS/polymc" -always-overwrite

      - name: chmod binary on macOS
        if: runner.os == 'macOS'
        run: |
          chmod +x "${{ github.workspace }}/${{ env.INSTALL_DIR }}/PolyMC.app/Contents/MacOS/polymc"

      - name: tar bundle on macOS
        if: runner.os == 'macOS'
        run: |
          cd ${{ env.INSTALL_DIR }}
          tar -czf ../PolyMC.tar.gz *

      - name: tar on Linux
        if: runner.os == 'Linux' && matrix.app_image != true
        run: |
          cd ${{ env.INSTALL_DIR }}
          tar -czf ../PolyMC.tar.gz *

      - name: Upload Linux tar.gz
        if: runner.os == 'Linux' && matrix.app_image != true
        uses: actions/upload-artifact@v2
        with:
          name: PolyMC-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}
          path: PolyMC.tar.gz

      - name: Upload AppImage for Linux
        if: matrix.app_image == true
        uses: actions/upload-artifact@v2
        with:
          name: PolyMC-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage
          path: PolyMC-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage

      - name: Copy OpenSSL libs on Windows x86
        if: runner.os == 'Windows' && matrix.msystem == 'mingw32'
        shell: msys2 {0}
        run: |
          cp /mingw32/bin/libcrypto-1_1.dll ${{ env.INSTALL_DIR }}/
          cp /mingw32/bin/libssl-1_1.dll ${{ env.INSTALL_DIR }}/

      - name: Copy OpenSSL libs on Windows x86_64
        if: runner.os == 'Windows' && matrix.msystem == 'mingw64'
        shell: msys2 {0}
        run: |
          cp /mingw64/bin/libcrypto-1_1-x64.dll ${{ env.INSTALL_DIR }}/
          cp /mingw64/bin/libssl-1_1-x64.dll ${{ env.INSTALL_DIR }}/

      - name: Upload package for Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: PolyMC-${{ matrix.name }}-${{ env.VERSION }}-${{ inputs.build_type }}
          path: ${{ env.INSTALL_DIR }}/**

      - name: Upload package for macOS
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v2
        with:
          name: PolyMC-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}
          path: PolyMC.tar.gz
